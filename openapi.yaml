openapi: 3.0.3
info:
  title: CityQuest API
  description: Dokumentation aller Schnittstellen
  version: 1.0.0
servers:
  - url: https
paths:
  /register:
    post:
      tags:
        - public
      description: Benutzer registriert sich
      requestBody:
        required: true
        content:
          application/json:
            schema:
              description: Registrierungsdaten
              example:
                username: DanielPillwein
                password: ichbinreich10!
                email: daniel.pillwein@htl.rennweg.at
      responses:
        '201':
          content:
            application/json:
              example:
                user:
                  id: 10
                  name: DanielPillwein
                  email: daniel.pillwein@htl.rennweg.at
                emailVerified: false
          description: JSON des hinzugefügten Benutzers
        '400':
          content:
            application/json:
              example:
                error: Der Benutzername oder die Email existiert bereits
          description: Der Benutzername oder die Email existiert bereits
  /login:
    post:
      tags:
        - public
      description: Benutzer loggt sich ein.
      security:
        - { }
      requestBody:
        required: true
        description: Zugangsdaten
        content:
          application/json:
            schema:
              example:
                username: WizMarki
                password: stubsi10!
      responses:
        '200':
          content:
            application/json:
              example:
                sessionKey: Lu9Tc1Pdola+SOnfPUxEkoKYuQLdjmsMK89uxT+RrrVegf1xQOI6Mpv5IXrYX6CVsukFLhwGzNH/zLMsuoBSbQ==
                firstLogin: true
              schema:
                type: string
                properties:
                  sessionKey:
                    type: string
                  firstLogin:
                      type: boolean
          description: Erfolgreich eingeloggt. Gibt *sessionKey* zurück
        '400':
          content:
            application/json:
              example:
                error: Falscher Benutzername oder falsches Passwort
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Die Fehlermeldung
          description: Falscher Benutzername oder falsches Passwort
        '401':
          content:
            application/json:
              example:
                error: Die E-Mail-Adresse wurde noch nicht verifiziert
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Die Fehlermeldung
          description: Die E-Mail-Adresse wurde noch nicht verifiziert
  /verify:
    post:
      tags:
        - public
      description: Verifiziert die E-Mail-Adresse
      requestBody:
        required: true
        content:
          application/json:
            schema:
              example:
                key: aa234adsklvneoiadv
                email: 9137@htl.rennweg.at
      responses:
        201:
          description: E-Mail-Adresse verifiziert
        401:
          description: Verifizierungs-Key existiert nicht oder ist abgelaufen
          content:
            application/json:
              example:
                error: Der Verifizierungs-Link ist ungültig oder abgelaufen
  /forgotpassword:
    get:
      tags:
        - public
      description: Es wird eine Email verschickt mit der das Passwort zurückgesetzt werden kann
      requestBody:
        required: true
        content:
          application/json:
            schema:
              example:
                email: 9137@htl.rennweg.at
      responses:
        201:
          description: Email wurde verschickt
        400: 
          description: Es existiert keine Benutzer mit der Email-Adresse
          content:
            application/json:
              example:
                error: Es gibt keinen Benutzer mit der angegebenen Email-Adresse
  /changepassword:
    patch:
      tags:
        - public
      description: Mit Zugriff auf die E-Mail-Adresse kann ich mein Passwort ändern
      requestBody:
        required: true
        content:
          application/json:
            schema:
              example:
                key: aa234adsklvneoiadv
                email: 9137@htl.rennweg.at
                new_password: Teesstt123!
      responses:
        204:
          description: Password wurde geändert
        401:
          description: Verifizierungs-Key existiert nicht oder ist abgelaufen
          content:
            application/json:
              example:
                error: Der Passwort-Vergessen-Link ist ungültig oder abgelaufen
  /verifyforgotpasswordkey:
    post:
      tags:
        - public
      description: Verifiziert den Key der Forgot Password request
      requestBody:
        required: true
        content:
          application/json:
            schema:
              example:
                key: aa234adsklvneoiadv
      responses:
        200:
          description: Der Key ist valide
        401:
          description: Verifizierungs-Key existiert nicht oder ist abgelaufen
          content:
            application/json:
              example:
                error: Der Verifizierungs-Link ist ungültig oder abgelaufen
  /getusers:
    get:
      tags:
        - auth
      description: Prüft ob der gesetzte API-Token des Benutzers gültig ist
      security:
        - ApiKeyAuth: [ ]
      responses:
        '200':
          description: Benutzer erkannt
          content:
            application/json:
              example:
                id: 10
                name: Quantom
                email: Quantom@myemail.com
  /deleteusers:
    delete:
      tags:
        - auth
      description: Löscht den eigenen Benutzer
      security:
        - ApiKeyAuth: [ ]
      responses:
        200:
          description: Dein Benutzer wurde gelöscht
        400:
          content:
            application/json:
              example:
                error: Es gibt keinen Benutzer mit diesem Token
          description: Der Benutzer existiert nicht
  /changepasswordauth:
    patch:
      tags:
        - auth
      description: Ein angemeldeter Benutzer kann sein Passwort ändern
      requestBody:
        required: true
        content:
          application/json:
            schema:
              example:
                old_password: altesPasswort
                new_password: Teesstt123!
      responses:
        201:
          description: Password wurde geändert
        401:
          description: Altes Passwort ist falsch
          content:
            application/json:
              example:
                error: Das angegebene Passwort ist falsch
  /logout:
    post:
      tags:
        - auth
      description: Benutzer loggt sich aus
      security:
        - ApiKeyAuth: [ ]
      responses:
        '204':
          description: User wurde abgemeldet
        '400':
          content:
            application/json:
              example:
                error: Es gibt keinen Benutzer mit diesem Token
          description: Es gibt keinen Benutzer mit diesem Token
  /submitrating:
    post:
      tags:
        - auth
      description: Der Benutzer gibt eine Bewertung ab
      requestBody:
        required: true
        content:
          application/json:
            schema:
              example:
                design: 2
                navigation: 3
                puzzle: 5
                sammelbuch: 1
      security:
        - ApiKeyAuth: [ ]
      responses:
        '201':
          description: Die Bewertung wurde uebernommen
        '401':
          content:
            application/json:
              example:
                error: Der Token ist ungueltig
          description: Der Token ist ungueltig
  /changeusername:
    post:
      tags:
        - auth
      description: Der Benutzername wird geändert
      requestBody:
        required: true
        content:
          application/json:
            schema:
              example:
                username: "neuer Benutzername"
      security:
        - ApiKeyAuth: [ ]
      responses:
        '201':
          description: Der Benutzername wurde gespeichert
        '401':
          content:
            application/json:
              example:
                error: Der Token ist ungueltig
          description: Der Token ist ungueltig
  /changeprofilepicture:
    post:
      tags:
        - auth
      description: Das Profilbild wird geändert
      requestBody:
        required: true
        content:
          application/json:
            schema:
              example:
                image: "some base64 data"
      security:
        - ApiKeyAuth: [ ]
      responses:
        '201':
          description: Das Profilbild wurde gespeichert
        '401':
          content:
            application/json:
              example:
                error: Der Token ist ungueltig
          description: Der Token ist ungueltig
  /getprofilepicture:
    get:
      tags:
        - auth
      description: Das Profilbild wird geändert
      security:
        - ApiKeyAuth: [ ]
      responses:
        '200':
          content:
            application/json:
              example:
                image: some base64 data
          description: Liefert das Profilbild zurück
        '401':
          content:
            application/json:
              example:
                error: Der Token ist ungueltig
          description: Der Token ist ungueltig
  /getcollection:
    get:
      tags:
        - auth
      description: Liefert die Sammelbucheinträge
      security:
        - ApiKeyAuth: [ ]
      responses:
        '200':
          content:
            application/json:
              example:
                entries: [
                  {id: 1,c, location: "Wien", text: "Das ist ein Text für Wien", image: "this is some base64 data"},
                  {id: 2, timestamp: "2015-06-14T23:34:30", location: "Wien", text: "Das ist ein Text für Wien", image: "this is some base64 data"}
                ]
          description: Liefert die Sammelbucheinträge
        '401':
          content:
            application/json:
              example:
                error: Der Token ist ungueltig
          description: Der Token ist ungueltig
  /getentry:
    get:
      tags:
        - auth
      description: Liefert einen einzelnen Sammelbucheintrag
      security:
        - ApiKeyAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              example:
                id: 8324
      responses:
        '200':
          content:
            application/json:
              example:
                entry: {id: 8324, timestamp: "2015-06-14T23:34:30", location: "Wien", locationId: 3, text: "Das ist ein Text für Wien", image: "this is some base64 data"}
          description: Liefert die Sammelbucheinträge
        '401':
          content:
            application/json:
              example:
                error: Der Token ist ungueltig
          description: Der Token ist ungueltig
        '403': 
          content:
            application/json:
              example:
                error: Es gibt keinen entry mit dieser ID
              description: Es gibt keinen entry mit dieser ID
  /deleteentry:
    delete:
      tags:
        - auth
      description: Löscht einen Sammelbuch-Eintrag
      security:
        - ApiKeyAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              example:
                id: 8324
      responses:
        200:
          description: Der Eintrag wurde gelöscht
        400:
          content:
            application/json:
              example:
                error: Ungültige ID
          description: Es existiert kein Eintrag mit dieser ID
  /getspots:
    get:
      tags:
        - auth
      description: Liefert alle Spots zurück
      security:
        - ApiKeyAuth: [ ]
      responses:
        '200':
          content:
            application/json:
              example:
                spots: [
                  {id: 1, name: "Parlament", coordinates: [48.232436, 16.351748], discovered: false, description: "Hier die Beschreibung."},
                  {id: 2, name: "Stephansdom", coordinates: [48.232436, 16.351748], discovered: true, description: "Hier die Beschreibung."}
                ]
          description: Liefert die Spots zurück
        '401':
          content:
            application/json:
              example:
                error: Der Token ist ungueltig
          description: Der Token ist ungueltig  
  /getpuzzle:
    post:
      tags:
        - auth
      description: Liefert alle Puzzle-Teile zurück
      security:
        - ApiKeyAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              example:
                pageIndex: 1
      responses:
        '200':
          content:
            application/json:
              example:
                pageIndex: 1
                pieces: [
                  {location_id: 1, location_name: "Museum Moderner Kunst", image: "base64", column: 10, row: 5},
                  {location_id: 2, location_name: "Weinhaus Pfandler", image: "", column: 10, row: 6 }
                ]
          description: Liefert alle Puzzle-Teile zurück. das Attribut 'image' ist leer, wenn der Spot noch nicht besucht bzw. ein bas64-String des Bildausschnitts, wenn der Spot bereits besucht wurde. Das Array pieces muss alle Puzzle-Teile des Puzzles enthalten. Die IDs sollten die gleichen sein, wie die bei der Karte.
        '401':
          content:
            application/json:
              example:
                error: Der Token ist ungueltig
          description: Der Token ist ungueltig   
  /createEntry:
    post:
      tags:
        - auth
      description: Erstellt einen neuen Sammelbucheintrag
      security:
        - ApiKeyAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              example:
                entry: {locationId: 3,  timestamp: "2004-06-14T23:34:30", text: "Das ist ein Text für Wien", image: "this is some base64 data"}
      responses:
        '201':
          description: Liefert die Sammelbucheinträge
        '401':
          content:
            application/json:
              example:
                error: Der Token ist ungueltig
          description: Der Token ist ungueltig
        '403': 
          content:
            application/json:
              example:
                error: Es gibt keine location mit dieser locationId
              description: Es gibt keine location mit dieser locationId
  /collectpuzzlepiece:
    post:
      tags:
        - auth
      description: Ein  user hat das Puzzle teil einer bestimmten location eingesammelt
      security:
        - ApiKeyAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              example:
                id: 7253
      responses:
        '201':
          description: das Puzzleteil ist eingesammelt
        '401':
          content:
            application/json:
              example:
                error: Der Token ist ungueltig
          description: Der Token ist ungueltig
        '402': 
          content:
            application/json:
              example:
                error: Das Puzzleteil wurde bereits eingesammelt
              description: Das Puzzleteil wurde bereits eingesammelt
        '403': 
          content:
            application/json:
              example:
                error: Es gibt keinen spot mit dieser spotId
              description: Es gibt keinen spot mit dieser spotId
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
      bearerFormat: TOKEN
